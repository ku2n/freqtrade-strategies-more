# --- Do not remove these libs ---
from freqtrade.strategy import IStrategy
from typing import Dict, List
from functools import reduce
from pandas import DataFrame
# --------------------------------

import talib.abstract as ta
import freqtrade.vendor.qtpylib.indicators as qtpylib

from datetime import datetime
from freqtrade.persistence import Trade
from freqtrade.strategy import stoploss_from_open

class Main(IStrategy):

    INTERFACE_VERSION: int = 3

    timeframe = '5m'

    order_types = {
        'entry': 'limit',
        'exit': 'limit',
        'stoploss': 'market',  
        'stoploss_on_exchange': True,
        'stoploss_on_exchange_interval': 5 # 5초마다 stoploss 갱신
    }

    def informative_pairs(self):
        
        return []

    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:

        dataframe['ema20'] = ta.EMA(dataframe, timeperiod=20)
        dataframe['ema50'] = ta.EMA(dataframe, timeperiod=50)
        dataframe['ema100'] = ta.EMA(dataframe, timeperiod=100)

        heikinashi = qtpylib.heikinashi(dataframe)
        dataframe['ha_open'] = heikinashi['open']
        dataframe['ha_close'] = heikinashi['close']

        return dataframe

    use_custom_stoploss = True

    def custom_stoploss(self, pair: str, trade: 'Trade', current_time: datetime,
                        current_rate: float, current_profit: float, **kwargs) -> float:

        # evaluate highest to lowest, so that highest possible stop is used
        if current_profit > 0.04:
            return stoploss_from_open(0.02, current_profit, is_short=trade.is_short)
        elif current_profit > 0.03:
            return stoploss_from_open(0.01, current_profit, is_short=trade.is_short)
        elif current_profit > 0.02:
            return stoploss_from_open(0.0, current_profit, is_short=trade.is_short)

        # return maximum stoploss value, keeping current stoploss price unchanged
        return 1